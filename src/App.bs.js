// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Firebase = require("firebase");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$ReactTemplate = require("./Utils.bs.js");
var Editor$ReactTemplate = require("./Editor.bs.js");
var NoteListRe$ReactTemplate = require("./reasonComponents/NoteListRe.bs.js");
var SigninPage$ReactTemplate = require("./signinComponents/SigninPage.bs.js");
var ReactFiletree$ReactTemplate = require("./reasonBindings/ReactFiletree.bs.js");

var config = {
  apiKey: "AIzaSyC-s0dwO0vw1QU7st911o8iBw9VVlIZ1uY",
  authDomain: "maple-notes.firebaseapp.com",
  databaseURL: "https://maple-notes.firebaseio.com",
  storageBucket: "maple-notes.appspot.com",
  messagingSenderId: "169600693604"
};

var app = Firebase.initializeApp(config);

function produceID(param) {
  var authObj = app.auth();
  var currUser = authObj.currentUser;
  if (currUser == null) {
    return "";
  } else {
    return currUser.uid;
  }
}

function serializeState(state) {
  var partialResult = {
    notes: state[/* notes */0],
    isLoaded: state[/* isLoaded */2],
    isUserSignedIn: state[/* isUserSignedIn */3],
    menuBarOpen: state[/* menuBarOpen */6],
    email: state[/* email */7],
    bottomMenuItems: state[/* bottomMenuItems */11]
  };
  console.log(partialResult);
  return ( JSON.stringify(partialResult) );
}

function deserializeState(_stateString) {
  var objOptJs = (JSON.parse(_stateString));
  var objOption = (objOptJs == null) ? undefined : Caml_option.some(objOptJs);
  console.log(objOption);
  if (objOptJs == null) {
    return undefined;
  } else {
    var bottomBarItemsWithFilter = objOptJs.bottomMenuItems.map((function (nullFilterItem) {
            var filterFunc = function (element, note) {
              return note[/* folderID */8] === element[/* id */0];
            };
            return /* record */[
                    /* id */nullFilterItem[/* id */0],
                    /* title */nullFilterItem[/* title */1],
                    /* isEditable */nullFilterItem[/* isEditable */2],
                    /* noteType */nullFilterItem[/* noteType */3],
                    /* isSelected */nullFilterItem[/* isSelected */4],
                    /* filterFunction */filterFunc
                  ];
          }));
    objOptJs.bottomMenuItems = bottomBarItemsWithFilter;
    return Caml_option.some(objOptJs);
  }
}

function consolidateCurrentNote(state) {
  var newNotes = state[/* notes */0].map((function (oldNote) {
          var match = state[/* currentNote */1];
          if (match !== undefined) {
            var currNote = match;
            if (oldNote[/* noteID */0] === currNote[/* noteID */0]) {
              return /* record */[
                      /* noteID */currNote[/* noteID */0],
                      /* title */currNote[/* title */1],
                      /* body */currNote[/* body */2],
                      /* timestamp */currNote[/* timestamp */3],
                      /* isStarred */currNote[/* isStarred */4],
                      /* isSelected */false,
                      /* isEditable */currNote[/* isEditable */6],
                      /* isTrash */currNote[/* isTrash */7],
                      /* folderID */currNote[/* folderID */8]
                    ];
            } else {
              return oldNote;
            }
          } else {
            return oldNote;
          }
        }));
  return /* record */[
          /* notes */newNotes,
          /* currentNote */state[/* currentNote */1],
          /* isLoaded */state[/* isLoaded */2],
          /* isUserSignedIn */state[/* isUserSignedIn */3],
          /* isSaved */state[/* isSaved */4],
          /* failureReason */state[/* failureReason */5],
          /* menuBarOpen */state[/* menuBarOpen */6],
          /* email */state[/* email */7],
          /* currentFilterElement */state[/* currentFilterElement */8],
          /* searchFilter */state[/* searchFilter */9],
          /* topMenuItems */state[/* topMenuItems */10],
          /* bottomMenuItems */state[/* bottomMenuItems */11]
        ];
}

function saveData(state, app) {
  var database = app.database();
  var dataPath = produceID(/* () */0);
  var savedState = consolidateCurrentNote(state);
  var dataValue = serializeState(savedState);
  database.ref(dataPath).set(dataValue, undefined);
  return /* () */0;
}

var appStyle = {
  display: "flex",
  flexDirection: "row"
};

var editorContainerStyle = {
  height: "100vh",
  overflowY: "auto",
  padding: "25px"
};

var maple = ReasonReact.reducerComponent("Maple");

var uuidGen = (
    function (val) {
          const uuidv4 = require('uuid/v4');
          return uuidv4();
    });

var initialTopItems = /* array */[
  /* record */[
    /* id */Curry._1(uuidGen, 10),
    /* title */"All Notes",
    /* isEditable */false,
    /* noteType : NoteBook */0,
    /* isSelected */true,
    /* filterFunction */(function (_element, note) {
        return !note[/* isTrash */7];
      })
  ],
  /* record */[
    /* id */Curry._1(uuidGen, 10),
    /* title */"Starred Notes",
    /* isEditable */false,
    /* noteType : Starred */2,
    /* isSelected */false,
    /* filterFunction */(function (_element, note) {
        return note[/* isStarred */4];
      })
  ],
  /* record */[
    /* id */Curry._1(uuidGen, 10),
    /* title */"Trash",
    /* isEditable */false,
    /* noteType : Trash */1,
    /* isSelected */false,
    /* filterFunction */(function (_element, note) {
        return note[/* isTrash */7];
      })
  ]
];

function augmentMenuItems(notes, fileTreeElements) {
  return fileTreeElements.map((function (ftElement) {
                var filteredNotes = notes.filter((function (note) {
                        return Curry._2(ftElement[/* filterFunction */5], ftElement, note);
                      }));
                var noteLength = filteredNotes.length;
                return /* record */[
                        /* noteElement */ftElement,
                        /* numNotes */noteLength
                      ];
              }));
}

function deselectNotes(notes) {
  return notes.map((function (note) {
                return /* record */[
                        /* noteID */note[/* noteID */0],
                        /* title */note[/* title */1],
                        /* body */note[/* body */2],
                        /* timestamp */note[/* timestamp */3],
                        /* isStarred */note[/* isStarred */4],
                        /* isSelected */false,
                        /* isEditable */note[/* isEditable */6],
                        /* isTrash */note[/* isTrash */7],
                        /* folderID */note[/* folderID */8]
                      ];
              }));
}

var initialBottomItems = /* array */[];

function make(_children) {
  return /* record */[
          /* debugName */maple[/* debugName */0],
          /* reactClassInternal */maple[/* reactClassInternal */1],
          /* handedOffState */maple[/* handedOffState */2],
          /* willReceiveProps */maple[/* willReceiveProps */3],
          /* didMount */maple[/* didMount */4],
          /* didUpdate */maple[/* didUpdate */5],
          /* willUnmount */maple[/* willUnmount */6],
          /* willUpdate */maple[/* willUpdate */7],
          /* shouldUpdate */maple[/* shouldUpdate */8],
          /* render */(function (self) {
              var updateFunction = function (_value) {
                var bodyText = ( _value() );
                return Curry._1(self[/* send */3], /* TypeCurrentNote */Block.__(9, [bodyText]));
              };
              var match = self[/* state */1][/* currentNote */1];
              var editorView;
              if (match !== undefined) {
                var note = match;
                editorView = React.createElement("div", {
                      style: editorContainerStyle
                    }, ReasonReact.element(note[/* noteID */0], undefined, Editor$ReactTemplate.make(note[/* body */2], "Write Anything...", undefined, updateFunction, true, /* array */[])));
              } else {
                editorView = React.createElement("div", undefined);
              }
              var partial_arg = Curry._1(self[/* state */1][/* currentFilterElement */8][/* filterFunction */5], self[/* state */1][/* currentFilterElement */8]);
              var filteredNotes = self[/* state */1][/* notes */0].filter(Curry.__1(partial_arg));
              var partial_arg$1 = self[/* state */1][/* searchFilter */9];
              var searchFilteredNotes = filteredNotes.filter(Curry.__1(partial_arg$1));
              var noteApplication = React.createElement("div", {
                    style: appStyle
                  }, ReasonReact.element(undefined, undefined, ReactFiletree$ReactTemplate.make(self[/* send */3], self[/* state */1][/* menuBarOpen */6], augmentMenuItems(self[/* state */1][/* notes */0], self[/* state */1][/* topMenuItems */10]), augmentMenuItems(self[/* state */1][/* notes */0], self[/* state */1][/* bottomMenuItems */11]), /* array */[])), ReasonReact.element(undefined, undefined, NoteListRe$ReactTemplate.make(self[/* send */3], searchFilteredNotes, self[/* state */1][/* isSaved */4], /* array */[])), editorView);
              var signinPage = ReasonReact.element(undefined, undefined, SigninPage$ReactTemplate.make(app, self[/* send */3], self[/* state */1][/* failureReason */5], /* array */[]));
              var match$1 = self[/* state */1][/* isUserSignedIn */3];
              if (match$1) {
                return noteApplication;
              } else {
                return signinPage;
              }
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* notes : array */[],
                      /* currentNote */undefined,
                      /* isLoaded */false,
                      /* isUserSignedIn */false,
                      /* isSaved */true,
                      /* failureReason */undefined,
                      /* menuBarOpen */true,
                      /* email */"",
                      /* currentFilterElement */Caml_array.caml_array_get(initialTopItems, 0),
                      /* searchFilter */(function (_note) {
                          return true;
                        }),
                      /* topMenuItems */initialTopItems,
                      /* bottomMenuItems */initialBottomItems
                    ];
            }),
          /* retainedProps */maple[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      saveData(state, app);
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */true,
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 1 : 
                      var newBottomItem_000 = /* id */Curry._1(uuidGen, 10);
                      var newBottomItem_003 = /* noteType : Folder */[Utils$ReactTemplate.generateColor(/* () */0)];
                      var newBottomItem_005 = function (element, note) {
                        return note[/* folderID */8] === element[/* id */0];
                      };
                      var newBottomItem = /* record */[
                        newBottomItem_000,
                        /* title */"New Folder",
                        /* isEditable */false,
                        newBottomItem_003,
                        /* isSelected */false,
                        newBottomItem_005
                      ];
                      var newBottomItems = state[/* bottomMenuItems */11].concat(/* array */[newBottomItem]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */false,
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */newBottomItems
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */!state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      var noteID = action[0];
                      var newNotes = state[/* notes */0].filter((function (note) {
                              return note[/* noteID */0] !== noteID;
                            }));
                      var match = state[/* currentNote */1];
                      var newCurrent;
                      if (match !== undefined) {
                        var currNote = match;
                        var match$1 = currNote[/* noteID */0] === noteID;
                        newCurrent = match$1 ? undefined : currNote;
                      } else {
                        newCurrent = undefined;
                      }
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */newNotes,
                                  /* currentNote */newCurrent,
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */false,
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 1 : 
                      var obj = deserializeState(action[0]);
                      if (obj !== undefined) {
                        var remoteStateObj = Caml_option.valFromOption(obj);
                        var newNotes$1 = remoteStateObj.notes;
                        var isLoaded = remoteStateObj.isLoaded;
                        var isUserSignedIn = remoteStateObj.isUserSignedIn;
                        var menuBarOpen = remoteStateObj.menuBarOpen;
                        var bottomMenuItems = remoteStateObj.bottomMenuItems;
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */newNotes$1,
                                    /* currentNote */state[/* currentNote */1],
                                    /* isLoaded */isLoaded,
                                    /* isUserSignedIn */isUserSignedIn,
                                    /* isSaved */state[/* isSaved */4],
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */menuBarOpen,
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */state[/* searchFilter */9],
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */bottomMenuItems
                                  ]]);
                      } else {
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */state[/* notes */0],
                                    /* currentNote */state[/* currentNote */1],
                                    /* isLoaded */state[/* isLoaded */2],
                                    /* isUserSignedIn */true,
                                    /* isSaved */state[/* isSaved */4],
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */state[/* menuBarOpen */6],
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */state[/* searchFilter */9],
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */state[/* bottomMenuItems */11]
                                  ]]);
                      }
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */true,
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */action[0],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */action[0],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 4 : 
                      var newMenuItem = action[0];
                      var updatedMenuItems = state[/* bottomMenuItems */11].map((function (menuItem) {
                              if (menuItem[/* id */0] === newMenuItem[/* id */0]) {
                                return newMenuItem;
                              } else {
                                return menuItem;
                              }
                            }));
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */false,
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */updatedMenuItems
                                ]]);
                  case 5 : 
                      var menuItemId = action[0];
                      var newBottomItems$1 = state[/* bottomMenuItems */11].map((function (menuItem) {
                              if (menuItem[/* id */0] === menuItemId) {
                                return /* record */[
                                        /* id */menuItem[/* id */0],
                                        /* title */menuItem[/* title */1],
                                        /* isEditable */true,
                                        /* noteType */menuItem[/* noteType */3],
                                        /* isSelected */menuItem[/* isSelected */4],
                                        /* filterFunction */menuItem[/* filterFunction */5]
                                      ];
                              } else {
                                return menuItem;
                              }
                            }));
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */newBottomItems$1
                                ]]);
                  case 6 : 
                      var menuItemId$1 = action[0];
                      var newBottomItems$2 = state[/* bottomMenuItems */11].filter((function (bottomBarItem) {
                              return bottomBarItem[/* id */0] !== menuItemId$1;
                            }));
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0],
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */false,
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */newBottomItems$2
                                ]]);
                  case 7 : 
                      var searchString = action[0];
                      if (searchString === "") {
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */state[/* notes */0],
                                    /* currentNote */state[/* currentNote */1],
                                    /* isLoaded */state[/* isLoaded */2],
                                    /* isUserSignedIn */state[/* isUserSignedIn */3],
                                    /* isSaved */state[/* isSaved */4],
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */state[/* menuBarOpen */6],
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */(function (_note) {
                                        return true;
                                      }),
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */state[/* bottomMenuItems */11]
                                  ]]);
                      } else {
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */state[/* notes */0],
                                    /* currentNote */state[/* currentNote */1],
                                    /* isLoaded */state[/* isLoaded */2],
                                    /* isUserSignedIn */state[/* isUserSignedIn */3],
                                    /* isSaved */state[/* isSaved */4],
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */state[/* menuBarOpen */6],
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */(function (note) {
                                        var regex = new RegExp(searchString);
                                        var result = regex.exec(note[/* body */2]);
                                        var bodySearch = result !== null;
                                        var result$1 = regex.exec(note[/* title */1]);
                                        var titleSearch = result$1 !== null;
                                        if (bodySearch) {
                                          return true;
                                        } else {
                                          return titleSearch;
                                        }
                                      }),
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */state[/* bottomMenuItems */11]
                                  ]]);
                      }
                  case 8 : 
                      var note = action[0];
                      var notes = state[/* notes */0].map((function (oldNote) {
                              if (oldNote[/* noteID */0] === note[/* noteID */0]) {
                                return /* record */[
                                        /* noteID */note[/* noteID */0],
                                        /* title */note[/* title */1],
                                        /* body */note[/* body */2],
                                        /* timestamp */note[/* timestamp */3],
                                        /* isStarred */note[/* isStarred */4],
                                        /* isSelected */true,
                                        /* isEditable */note[/* isEditable */6],
                                        /* isTrash */note[/* isTrash */7],
                                        /* folderID */note[/* folderID */8]
                                      ];
                              } else {
                                var match = state[/* currentNote */1];
                                if (match !== undefined) {
                                  var currNote = match;
                                  if (currNote[/* noteID */0] === oldNote[/* noteID */0]) {
                                    return /* record */[
                                            /* noteID */currNote[/* noteID */0],
                                            /* title */currNote[/* title */1],
                                            /* body */currNote[/* body */2],
                                            /* timestamp */currNote[/* timestamp */3],
                                            /* isStarred */currNote[/* isStarred */4],
                                            /* isSelected */false,
                                            /* isEditable */currNote[/* isEditable */6],
                                            /* isTrash */currNote[/* isTrash */7],
                                            /* folderID */currNote[/* folderID */8]
                                          ];
                                  } else {
                                    return /* record */[
                                            /* noteID */oldNote[/* noteID */0],
                                            /* title */oldNote[/* title */1],
                                            /* body */oldNote[/* body */2],
                                            /* timestamp */oldNote[/* timestamp */3],
                                            /* isStarred */oldNote[/* isStarred */4],
                                            /* isSelected */false,
                                            /* isEditable */oldNote[/* isEditable */6],
                                            /* isTrash */oldNote[/* isTrash */7],
                                            /* folderID */oldNote[/* folderID */8]
                                          ];
                                  }
                                } else {
                                  return /* record */[
                                          /* noteID */oldNote[/* noteID */0],
                                          /* title */oldNote[/* title */1],
                                          /* body */oldNote[/* body */2],
                                          /* timestamp */oldNote[/* timestamp */3],
                                          /* isStarred */oldNote[/* isStarred */4],
                                          /* isSelected */false,
                                          /* isEditable */oldNote[/* isEditable */6],
                                          /* isTrash */oldNote[/* isTrash */7],
                                          /* folderID */oldNote[/* folderID */8]
                                        ];
                                }
                              }
                            }));
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */notes,
                                  /* currentNote */note,
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 9 : 
                      var match$2 = state[/* currentNote */1];
                      if (match$2 !== undefined) {
                        var currNote$1 = match$2;
                        var newNote_000 = /* noteID */currNote$1[/* noteID */0];
                        var newNote_001 = /* title */currNote$1[/* title */1];
                        var newNote_002 = /* body */action[0];
                        var newNote_003 = /* timestamp */currNote$1[/* timestamp */3];
                        var newNote_004 = /* isStarred */currNote$1[/* isStarred */4];
                        var newNote_005 = /* isSelected */currNote$1[/* isSelected */5];
                        var newNote_006 = /* isEditable */currNote$1[/* isEditable */6];
                        var newNote_007 = /* isTrash */currNote$1[/* isTrash */7];
                        var newNote_008 = /* folderID */currNote$1[/* folderID */8];
                        var newNote = /* record */[
                          newNote_000,
                          newNote_001,
                          newNote_002,
                          newNote_003,
                          newNote_004,
                          newNote_005,
                          newNote_006,
                          newNote_007,
                          newNote_008
                        ];
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */state[/* notes */0],
                                    /* currentNote */newNote,
                                    /* isLoaded */state[/* isLoaded */2],
                                    /* isUserSignedIn */state[/* isUserSignedIn */3],
                                    /* isSaved */false,
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */state[/* menuBarOpen */6],
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */state[/* searchFilter */9],
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */state[/* bottomMenuItems */11]
                                  ]]);
                      } else {
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */state[/* notes */0],
                                    /* currentNote */undefined,
                                    /* isLoaded */state[/* isLoaded */2],
                                    /* isUserSignedIn */state[/* isUserSignedIn */3],
                                    /* isSaved */false,
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */state[/* menuBarOpen */6],
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */state[/* searchFilter */9],
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */state[/* bottomMenuItems */11]
                                  ]]);
                      }
                  case 10 : 
                      var note$1 = action[0];
                      var notes$1 = state[/* notes */0].map((function (oldNote) {
                              if (oldNote[/* noteID */0] === note$1[/* noteID */0]) {
                                return note$1;
                              } else {
                                return oldNote;
                              }
                            }));
                      var match$3 = state[/* currentNote */1];
                      if (match$3 !== undefined) {
                        var match$4 = match$3[/* noteID */0] === note$1[/* noteID */0];
                        if (match$4) {
                          return /* Update */Block.__(0, [/* record */[
                                      /* notes */notes$1,
                                      /* currentNote */note$1,
                                      /* isLoaded */state[/* isLoaded */2],
                                      /* isUserSignedIn */state[/* isUserSignedIn */3],
                                      /* isSaved */false,
                                      /* failureReason */state[/* failureReason */5],
                                      /* menuBarOpen */state[/* menuBarOpen */6],
                                      /* email */state[/* email */7],
                                      /* currentFilterElement */state[/* currentFilterElement */8],
                                      /* searchFilter */state[/* searchFilter */9],
                                      /* topMenuItems */state[/* topMenuItems */10],
                                      /* bottomMenuItems */state[/* bottomMenuItems */11]
                                    ]]);
                        } else {
                          return /* Update */Block.__(0, [/* record */[
                                      /* notes */notes$1,
                                      /* currentNote */state[/* currentNote */1],
                                      /* isLoaded */state[/* isLoaded */2],
                                      /* isUserSignedIn */state[/* isUserSignedIn */3],
                                      /* isSaved */false,
                                      /* failureReason */state[/* failureReason */5],
                                      /* menuBarOpen */state[/* menuBarOpen */6],
                                      /* email */state[/* email */7],
                                      /* currentFilterElement */state[/* currentFilterElement */8],
                                      /* searchFilter */state[/* searchFilter */9],
                                      /* topMenuItems */state[/* topMenuItems */10],
                                      /* bottomMenuItems */state[/* bottomMenuItems */11]
                                    ]]);
                        }
                      } else {
                        return /* Update */Block.__(0, [/* record */[
                                    /* notes */notes$1,
                                    /* currentNote */state[/* currentNote */1],
                                    /* isLoaded */state[/* isLoaded */2],
                                    /* isUserSignedIn */state[/* isUserSignedIn */3],
                                    /* isSaved */state[/* isSaved */4],
                                    /* failureReason */state[/* failureReason */5],
                                    /* menuBarOpen */state[/* menuBarOpen */6],
                                    /* email */state[/* email */7],
                                    /* currentFilterElement */state[/* currentFilterElement */8],
                                    /* searchFilter */state[/* searchFilter */9],
                                    /* topMenuItems */state[/* topMenuItems */10],
                                    /* bottomMenuItems */state[/* bottomMenuItems */11]
                                  ]]);
                      }
                  case 11 : 
                      var noteID2 = Curry._1(uuidGen, 20);
                      var note_003 = /* timestamp */( Date.now() );
                      var note_008 = /* folderID */state[/* currentFilterElement */8][/* id */0];
                      var note$2 = /* record */[
                        /* noteID */noteID2,
                        /* title */"New Note",
                        /* body */"",
                        note_003,
                        /* isStarred */false,
                        /* isSelected */false,
                        /* isEditable */false,
                        /* isTrash */false,
                        note_008
                      ];
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */state[/* notes */0].concat(/* array */[note$2]),
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */false,
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 12 : 
                      var noteId = action[0];
                      var newNotes$2 = state[/* notes */0].map((function (note) {
                              if (note[/* noteID */0] === noteId) {
                                return /* record */[
                                        /* noteID */note[/* noteID */0],
                                        /* title */note[/* title */1],
                                        /* body */note[/* body */2],
                                        /* timestamp */note[/* timestamp */3],
                                        /* isStarred */note[/* isStarred */4],
                                        /* isSelected */note[/* isSelected */5],
                                        /* isEditable */true,
                                        /* isTrash */note[/* isTrash */7],
                                        /* folderID */note[/* folderID */8]
                                      ];
                              } else {
                                return note;
                              }
                            }));
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */newNotes$2,
                                  /* currentNote */state[/* currentNote */1],
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */state[/* currentFilterElement */8],
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */state[/* topMenuItems */10],
                                  /* bottomMenuItems */state[/* bottomMenuItems */11]
                                ]]);
                  case 13 : 
                      var element = action[0];
                      var newTopMenuItems = state[/* topMenuItems */10].map((function (oldElement) {
                              if (oldElement[/* id */0] === element[/* id */0]) {
                                return /* record */[
                                        /* id */element[/* id */0],
                                        /* title */element[/* title */1],
                                        /* isEditable */element[/* isEditable */2],
                                        /* noteType */element[/* noteType */3],
                                        /* isSelected */true,
                                        /* filterFunction */element[/* filterFunction */5]
                                      ];
                              } else {
                                return /* record */[
                                        /* id */oldElement[/* id */0],
                                        /* title */oldElement[/* title */1],
                                        /* isEditable */oldElement[/* isEditable */2],
                                        /* noteType */oldElement[/* noteType */3],
                                        /* isSelected */false,
                                        /* filterFunction */oldElement[/* filterFunction */5]
                                      ];
                              }
                            }));
                      var newBottomMenuItems = state[/* bottomMenuItems */11].map((function (oldElement) {
                              if (oldElement[/* id */0] === element[/* id */0]) {
                                return /* record */[
                                        /* id */element[/* id */0],
                                        /* title */element[/* title */1],
                                        /* isEditable */element[/* isEditable */2],
                                        /* noteType */element[/* noteType */3],
                                        /* isSelected */true,
                                        /* filterFunction */element[/* filterFunction */5]
                                      ];
                              } else {
                                return /* record */[
                                        /* id */oldElement[/* id */0],
                                        /* title */oldElement[/* title */1],
                                        /* isEditable */oldElement[/* isEditable */2],
                                        /* noteType */oldElement[/* noteType */3],
                                        /* isSelected */false,
                                        /* filterFunction */oldElement[/* filterFunction */5]
                                      ];
                              }
                            }));
                      return /* Update */Block.__(0, [/* record */[
                                  /* notes */consolidateCurrentNote(state)[/* notes */0],
                                  /* currentNote */undefined,
                                  /* isLoaded */state[/* isLoaded */2],
                                  /* isUserSignedIn */state[/* isUserSignedIn */3],
                                  /* isSaved */state[/* isSaved */4],
                                  /* failureReason */state[/* failureReason */5],
                                  /* menuBarOpen */state[/* menuBarOpen */6],
                                  /* email */state[/* email */7],
                                  /* currentFilterElement */element,
                                  /* searchFilter */state[/* searchFilter */9],
                                  /* topMenuItems */newTopMenuItems,
                                  /* bottomMenuItems */newBottomMenuItems
                                ]]);
                  
                }
              }
            }),
          /* jsElementWrapped */maple[/* jsElementWrapped */13]
        ];
}

exports.app = app;
exports.produceID = produceID;
exports.serializeState = serializeState;
exports.deserializeState = deserializeState;
exports.consolidateCurrentNote = consolidateCurrentNote;
exports.saveData = saveData;
exports.appStyle = appStyle;
exports.editorContainerStyle = editorContainerStyle;
exports.maple = maple;
exports.uuidGen = uuidGen;
exports.initialTopItems = initialTopItems;
exports.augmentMenuItems = augmentMenuItems;
exports.deselectNotes = deselectNotes;
exports.initialBottomItems = initialBottomItems;
exports.make = make;
/* app Not a pure module */
